{"meta":{"title":"Zather","subtitle":"","description":"","author":"Zather","url":"http://wjymzh.github.io","root":"/"},"pages":[{"title":"Zather is me","date":"2020-12-16T13:31:46.000Z","updated":"2020-12-16T15:35:35.443Z","comments":false,"path":"about/index.html","permalink":"http://wjymzh.github.io/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-12-16T13:24:14.000Z","updated":"2020-12-16T15:33:18.210Z","comments":false,"path":"categories/index.html","permalink":"http://wjymzh.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-12-16T13:25:16.000Z","updated":"2020-12-16T15:33:03.738Z","comments":false,"path":"tags/index.html","permalink":"http://wjymzh.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"开启MySQL远程访问权限 允许远程连接","slug":"开启MySQL远程访问权限-允许远程连接","date":"2020-12-19T07:17:26.000Z","updated":"2020-12-19T07:23:34.310Z","comments":true,"path":"2020/12/19/开启MySQL远程访问权限-允许远程连接/","link":"","permalink":"http://wjymzh.github.io/2020/12/19/%E5%BC%80%E5%90%AFMySQL%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90-%E5%85%81%E8%AE%B8%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/","excerpt":"","text":"1、登陆mysql数据库1mysql -u root -p 查看user表 12345678910mysql&gt; use mysql;Database changedmysql&gt; select host,user,password from user;+--------------+------+-------------------------------------------+| host | user | password |+--------------+------+-------------------------------------------+| localhost | root | *A731AEBFB621E354CD41BAF207D884A609E81F5E || 192.168.1.1 | root | *A731AEBFB621E354CD41BAF207D884A609E81F5E |+--------------+------+-------------------------------------------+2 rows in set (0.00 sec) 可以看到在user表中已创建的root用户。host字段表示登录的主机，其值可以用IP，也可用主机名， (1)有时想用本地IP登录，那么可以将以上的Host值改为自己的Ip即可。 2、实现远程连接(授权法) 将host字段的值改为%就表示在任何客户端机器上能以root用户登录到mysql服务器，建议在开发时设为%。 update user set host = ’%’ where user = ’root’; 将权限改为ALL PRIVILEGES 1234567891011121314151617mysql&gt; use mysql;Database changedmysql&gt; grant all privileges on *.* to root@&#x27;%&#x27; identified by &quot;password&quot;;Query OK, 0 rows affected (0.00 sec)mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)mysql&gt; select host,user,password from user;+--------------+------+-------------------------------------------+| host | user | password |+--------------+------+-------------------------------------------+| localhost | root | *A731AEBFB621E354CD41BAF207D884A609E81F5E || 192.168.1.1 | root | *A731AEBFB621E354CD41BAF207D884A609E81F5E || % | root | *A731AEBFB621E354CD41BAF207D884A609E81F5E |+--------------+------+-------------------------------------------+3 rows in set (0.00 sec) 这样机器就可以以用户名root密码root远程访问该机器上的MySql. 3、实现远程连接（改表法）12use mysql;update user set host = &#x27;%&#x27; where user = &#x27;root&#x27;; 这样在远端就可以通过root用户访问Mysql.","categories":[{"name":"运维","slug":"运维","permalink":"http://wjymzh.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"运维","slug":"运维","permalink":"http://wjymzh.github.io/tags/%E8%BF%90%E7%BB%B4/"},{"name":"MySQL，数据库","slug":"MySQL，数据库","permalink":"http://wjymzh.github.io/tags/MySQL%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"CentOS7.5 yum 安装与配置MySQL5.7.24","slug":"CentOS7-5-yum-安装与配置MySQL5-7-24","date":"2020-12-19T07:00:48.000Z","updated":"2020-12-19T07:15:31.750Z","comments":true,"path":"2020/12/19/CentOS7-5-yum-安装与配置MySQL5-7-24/","link":"","permalink":"http://wjymzh.github.io/2020/12/19/CentOS7-5-yum-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEMySQL5-7-24/","excerpt":"","text":"安装环境：CentOS7 64位 MINI版，安装MySQL5.7 1、配置YUM源在MySQL官网中下载YUM源rpm安装包：https://dev.mysql.com/downloads/repo/yum/ 下面已经提供一个YUM源安装包,如果不需要特定版本可直接使用我提供的5.7.24版本 12345# 下载mysql源安装包wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm# 安装mysql源yum localinstall mysql57-community-release-el7-8.noarch.rpm 检查mysql源是否安装成功 1yum repolist enabled | grep &quot;mysql.*-community.*&quot; 看到上图所示表示安装成功。 2、安装MySQL1yum install mysql-community-server 3、启动MySQL服务1systemctl start mysqld 查看MySQL的启动状态 1systemctl status mysqld 4、开机启动123systemctl enable mysqldsystemctl daemon-reload 5、修改root本地登录密码mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改： 1grep &#x27;temporary password&#x27; /var/log/mysqld.log 123456# 登录mysql -u root -p# 修改root密码ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;MyNewPass4!&#x27;;或者set password for &#x27;root&#x27;@&#x27;localhost&#x27;=password(&#x27;MyNewPass4!&#x27;); 注意：mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements错误，如下图所示：通过msyql环境变量可以查看密码策略的相关信息： 1show variables like &#x27;%password%&#x27;; 官网密码策略详细说明： http://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html#sysvar_validate_password_policyMySQL 修改密码策略在/etc/my.cnf文件添加validate_password_policy配置，指定密码策略 12# 选择0（LOW），1（MEDIUM），2（STRONG）其中一种，选择2需要提供密码字典文件validate_password_policy=0 如果不需要密码策略，添加my.cnf文件中添加如下配置禁用即可： 1validate_password = off 重新启动mysql服务使配置生效： 1systemctl restart mysqld 默认配置文件路径： 配置文件：/etc/my.cnf日志文件：/var/log//var/log/mysqld.log服务启动脚本：/usr/lib/systemd/system/mysqld.servicesocket文件：/var/run/mysqld/mysqld.pid 如果忘记root密码，则按如下操作恢复：在[mysqld]的段中加上一句：skip-grant-tables 保存并且退出vi。 12345# 登录mysql -u root# 修改密码update mysql.user set authentication_string=password(&#x27;123qwe&#x27;) where user=&#x27;root&#x27; and Host = &#x27;localhost&#x27;;flush privileges","categories":[{"name":"运维","slug":"运维","permalink":"http://wjymzh.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"运维","slug":"运维","permalink":"http://wjymzh.github.io/tags/%E8%BF%90%E7%BB%B4/"},{"name":"MySQL，数据库","slug":"MySQL，数据库","permalink":"http://wjymzh.github.io/tags/MySQL%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"Github加速指南","slug":"Github加速指南","date":"2020-12-19T06:11:37.000Z","updated":"2020-12-19T06:43:13.866Z","comments":true,"path":"2020/12/19/Github加速指南/","link":"","permalink":"http://wjymzh.github.io/2020/12/19/Github%E5%8A%A0%E9%80%9F%E6%8C%87%E5%8D%97/","excerpt":"","text":"平时在使用Github的时候克隆仓库总是特别慢，总结了以下几种解决方案。 1. GitHub 镜像访问这里提供两个最常用的镜像地址： https://github.com.cnpmjs.org https://hub.fastgit.org也就是说上面的镜像就是一个克隆版的 GitHub，你可以访问上面的镜像网站，网站的内容跟 GitHub 是完整同步的镜像，然后在这个网站里面进行下载克隆等操作。2. GitHub 文件加速利用 Cloudflare Workers 对 github release 、archive 以及项目文件进行加速，部署无需服务器且自带CDN. https://gh.api.99988866.xyz https://g.ioiox.com以上网站为演示站点，如无法打开可以查看开源项目：gh-proxy-GitHub(https://hunsh.net/archives/23/) 文件加速自行部署。3. Github 加速下载只需要复制当前 GitHub 地址粘贴到输入框中就可以代理加速下载！地址：http://toolwa.com/github/4. 加速你的 Githubhttps://github.zhlh6.cn 输入 Github 仓库地址，使用生成的地址进行 git ssh 等操作 5. 谷歌浏览器 GitHub 加速插件(推荐) 6. GitHub raw 加速GitHub raw 域名并非 github.com 而是 raw.githubusercontent.com，上方的 GitHub 加速如果不能加速这个域名，那么可以使用 Static CDN 提供的反代服务。 将 raw.githubusercontent.com 替换为 raw.staticdn.net 即可加速。 7. GitHub + Jsdelivrjsdelivr 唯一美中不足的就是它不能获取 exe 文件以及 Release 处附加的 exe 和 dmg 文件。 也就是说如果 exe 文件是附加在 Release 处但是没有在 code 里面的话是无法获取的。所以只能当作静态文件 cdn 用途，而不能作为 Release 加速下载的用途。 8. 通过 Gitee 中转 fork 仓库下载访问 gitee 网站：https://gitee.com/ 并登录，在顶部选择“从 GitHub/GitLab 导入仓库” 如下：在导入页面中粘贴你的Github仓库地址，点击导入即可：等待导入操作完成，然后在导入的仓库中下载浏览对应的该 GitHub 仓库代码，你也可以点击仓库顶部的“刷新”按钮进行 Github 代码仓库的同步。 9. 通过修改 HOSTS 文件进行加速手动把cdn和ip地址绑定。 第一步：获取 github 的 global.ssl.fastly 地址访问：http://github.global.ssl.fastly.net.ipaddress.com/#ipinfo 获取cdn和ip域名：得到：199.232.69.194 https://github.global.ssl.fastly.net 第二步：获取github.com地址 访问：https://github.com.ipaddress.com/#ipinfo 获取cdn和ip：得到：140.82.114.4 http://github.com 第三步：修改 host 文件映射上面查找到的 IP windows系统： 1、修改C:\\Windows\\System32\\drivers\\etc\\hosts文件的权限，指定可写入：右击-&gt;hosts-&gt;属性-&gt;安全-&gt;编辑-&gt;点击Users-&gt;在Users的权限“写入”后面打勾。如下：然后点击确定。 2、右击-&gt;hosts-&gt;打开方式-&gt;选定记事本（或者你喜欢的编辑器）-&gt;在末尾处添加以下内容： 199.232.69.194 github.global.ssl.fastly.net 140.82.114.4 github.com","categories":[{"name":"Github","slug":"Github","permalink":"http://wjymzh.github.io/categories/Github/"}],"tags":[{"name":"Github","slug":"Github","permalink":"http://wjymzh.github.io/tags/Github/"},{"name":"加速","slug":"加速","permalink":"http://wjymzh.github.io/tags/%E5%8A%A0%E9%80%9F/"},{"name":"Git","slug":"Git","permalink":"http://wjymzh.github.io/tags/Git/"}]},{"title":"SSH sftp 命令","slug":"SSH-sftp-命令","date":"2020-12-16T16:46:55.000Z","updated":"2020-12-16T16:46:55.680Z","comments":true,"path":"2020/12/17/SSH-sftp-命令/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/SSH-sftp-%E5%91%BD%E4%BB%A4/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"SSH rsync 命令","slug":"SSH-rsync-命令","date":"2020-12-16T16:46:43.000Z","updated":"2020-12-16T16:46:43.411Z","comments":true,"path":"2020/12/17/SSH-rsync-命令/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/SSH-rsync-%E5%91%BD%E4%BB%A4/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"scp 命令","slug":"scp-命令","date":"2020-12-16T16:46:28.000Z","updated":"2020-12-16T16:46:28.806Z","comments":true,"path":"2020/12/17/scp-命令/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/scp-%E5%91%BD%E4%BB%A4/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"SSH 证书登录","slug":"SSH-证书登录","date":"2020-12-16T16:46:14.000Z","updated":"2020-12-16T16:46:14.266Z","comments":true,"path":"2020/12/17/SSH-证书登录/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/SSH-%E8%AF%81%E4%B9%A6%E7%99%BB%E5%BD%95/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"SSH SSH 端口转发","slug":"SSH-SSH-端口转发","date":"2020-12-16T16:45:59.000Z","updated":"2020-12-16T16:45:59.553Z","comments":true,"path":"2020/12/17/SSH-SSH-端口转发/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/SSH-SSH-%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"SSH 服务器","slug":"SSH-服务器","date":"2020-12-16T16:45:42.000Z","updated":"2020-12-16T16:45:42.985Z","comments":true,"path":"2020/12/17/SSH-服务器/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/SSH-%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"SSH 密钥登录","slug":"SSH-密钥登录","date":"2020-12-16T16:45:24.000Z","updated":"2020-12-19T08:59:23.822Z","comments":true,"path":"2020/12/17/SSH-密钥登录/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/SSH-%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/","excerpt":"","text":"SSH 默认采用密码登录，这种方法有很多缺点，简单的密码不安全，复杂的密码不容易记忆，每次手动输入也很麻烦。密钥登录是更好的解决方案。 1.密钥是什么","categories":[{"name":"SSH","slug":"SSH","permalink":"http://wjymzh.github.io/categories/SSH/"}],"tags":[{"name":"SSH","slug":"SSH","permalink":"http://wjymzh.github.io/tags/SSH/"},{"name":"安全，协议","slug":"安全，协议","permalink":"http://wjymzh.github.io/tags/%E5%AE%89%E5%85%A8%EF%BC%8C%E5%8D%8F%E8%AE%AE/"},{"name":"Linux","slug":"Linux","permalink":"http://wjymzh.github.io/tags/Linux/"}]},{"title":"SSH 客户端","slug":"SSH-客户端","date":"2020-12-16T16:45:09.000Z","updated":"2020-12-19T08:43:37.490Z","comments":true,"path":"2020/12/17/SSH-客户端/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/SSH-%E5%AE%A2%E6%88%B7%E7%AB%AF/","excerpt":"","text":"1.简介OpenSSH 的客户端是二进制程序 ssh。它在 Linux/Unix 系统的位置是/usr/local/bin/ssh，Windows 系统的位置是\\Program Files\\OpenSSH\\bin\\ssh.exe。Linux 系统一般都自带 ssh，如果没有就需要安装。 12345# Ubuntu 和 Debian$ sudo apt install openssh-client# CentOS 和 Fedora$ sudo dnf install openssh-clients 安装以后，可以使用-h参数，查看一下是否安装成功。 1$ ssh -h 2.基本用法ssh 最常见的用途就是登录服务器，这要求服务器安装并正在运行 SSH 服务器软件。 ssh 登录服务器的命令如下。 1$ ssh hostname 上面命令中，hostname是主机名，它可以是域名，也可能是 IP 地址或局域网内部的主机名。不指定用户名的情况下，将使用客户端的当前用户名，作为远程服务器的登录用户名。如果要指定用户名，可以采用下面的语法。 1$ ssh user@hostname 上面的命令中，用户名和主机名写在一起了，之间使用@分隔。 用户名也可以使用ssh的-l参数指定，这样的话，用户名和主机名就不用写在一起了。 1$ ssh -l username host ssh 默认连接服务器的22端口，-p参数可以指定其他端口。 1$ ssh -p 8821 foo.com 上面命令连接服务器foo.com的8821端口。 3.连接流程ssh 连接远程服务器后，首先有一个验证过程，验证远程服务器是否为陌生地址。 如果是第一次连接某一台服务器，命令行会显示一段文字，表示不认识这台机器，提醒用户确认是否需要连接。 123The authenticity of host &#x27;foo.com (192.168.121.111)&#x27; can&#x27;t be established.ECDSA key fingerprint is SHA256:Vybt22mVXuNuB5unE++yowF7lgA/9/2bLSiO3qmYWBY.Are you sure you want to continue connecting (yes/no)? 上面这段文字告诉用户，foo.com这台服务器的指纹是陌生的，让用户选择是否要继续连接（输入 yes 或 no）。 所谓“服务器指纹”，指的是 SSH 服务器公钥的哈希值。每台 SSH 服务器都有唯一一对密钥，用于跟客户端通信，其中公钥的哈希值就可以用来识别服务器。 下面的命令可以查看某个公钥的指纹。 12$ ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub256 da:24:43:0b:2e:c1:3f:a1:84:13:92:01:52:b4:84:ff (ECDSA) 上面的例子中，ssh-keygen -l -f命令会输出公钥/etc/ssh/ssh_host_ecdsa_key.pub的指纹。 ssh 会将本机连接过的所有服务器公钥的指纹，都储存在本机的~/.ssh/known_hosts文件中。每次连接服务器时，通过该文件判断是否为陌生主机（陌生公钥）。 在上面这段文字后面，输入yes，就可以将当前服务器的指纹也储存在本机~/.ssh/known_hosts文件中，并显示下面的提示。以后再连接的时候，就不会再出现警告了. 1Warning: Permanently added &#x27;foo.com (192.168.121.111)&#x27; (RSA) to the list of known hosts 然后，客户端就会跟服务器建立连接。接着，ssh 就会要求用户输入所要登录账户的密码。用户输入并验证密码正确以后，就能登录远程服务器的 Shell 了。 4.服务器密钥变更服务器指纹可以防止有人恶意冒充远程主机。如果服务器的密钥发生变更（比如重装了 SSH 服务器），客户端再次连接时，就会发生公钥指纹不吻合的情况。这时，客户端就会中断连接，并显示一段警告信息。 1234567891011@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!Someone could be eavesdropping on you right now (man-in-the-middle attack)!It is also possible that the RSA host key has just been changed.The fingerprint for the RSA key sent by the remote host is77:a5:69:81:9b:eb:40:76:7b:13:04:a9:6c:f4:9c:5d.Please contact your system administrator.Add correct host key in /home/me/.ssh/known_hosts to get rid of this message.Offending key in /home/me/.ssh/known_hosts:36 上面这段文字的意思是，该主机的公钥指纹跟~/.ssh/known_hosts文件储存的不一样，必须处理以后才能连接。这时，你需要确认是什么原因，使得公钥指纹发生变更，到底是恶意劫持，还是管理员变更了 SSH 服务器公钥。 如果新的公钥确认可以信任，需要继续执行连接，你可以执行下面的命令，将原来的公钥指纹从~/.ssh/known_hosts文件删除。 1$ ssh-keygen -R hostname 上面命令中，hostname是发生公钥变更的主机名。除了使用上面的命令，你也可以手工修改known_hosts文件，将公钥指纹删除。删除了原来的公钥指纹以后，重新执行 ssh 命令连接远程服务器，将新的指纹加入known_hosts文件，就可以顺利连接了。 5.执行远程命令SSH 登录成功后，用户就进入了远程主机的命令行环境，所看到的提示符，就是远程主机的提示符。这时，你就可以输入想要在远程主机执行的命令。 另一种执行远程命令的方法，是将命令直接写在ssh命令的后面。 1$ ssh username@hostname command 上面的命令会使得 SSH 在登录成功后，立刻在远程主机上执行命令command。 下面是一个例子。 1$ ssh foo@server.example.com cat /etc/hosts 上面的命令会在登录成功后，立即远程执行命令cat /etc/hosts。 采用这种语法执行命令时，ssh 客户端不会提供互动式的 Shell 环境，而是直接远程命令的执行结果输出在命令行。但是，有些命令需要互动式的 Shell 环境，这时就要使用-t参数。 123456# 报错$ ssh remote.server.com emacsemacs: standard input is not a tty# 不报错$ ssh -t server.example.com emacs 上面代码中，emacs命令需要一个互动式 Shell，所以报错。只有加上-t参数，ssh 才会分配一个互动式 Shell。 6.加密参数SSH 连接的握手阶段，客户端必须跟服务端约定加密参数集（cipher suite）。 加密参数集包含了若干不同的加密参数，它们之间使用下划线连接在一起，下面是一个例子。 1TLS_RSA_WITH_AES_128_CBC_SHA 它的含义如下。 TLS：协议 RSA：密钥交换算法 AES：加密算法 128：加密强度 CBC：加密模式 SHA：数字签名的 Hash 函数 下面是一个例子，客户端向服务器发出的握手信息。 1234567891011121314151617181920212223242526272829Handshake protocol: ClientHello Version: TLS 1.2 Random Client time: May 22, 2030 02:43:46 GMT Random bytes: b76b0e61829557eb4c611adfd2d36eb232dc1332fe29802e321ee871 Session ID: (empty) Cipher Suites Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256” Suite: TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 Suite: TLS_RSA_WITH_AES_128_GCM_SHA256 Suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA Suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA Suite: TLS_RSA_WITH_AES_128_CBC_SHA Suite: TLS_RSA_WITH_3DES_EDE_CBC_SHA Suite: TLS_RSA_WITH_RC4_128_SHA Compression methods Method: null Extensions Extension: server_name Hostname: www.feistyduck.com Extension: renegotiation_info Extension: elliptic_curves Named curve: secp256r1 Named curve: secp384r1 Extension: signature_algorithms Algorithm: sha1/rsa Algorithm: sha256/rsa Algorithm: sha1/ecdsa Algorithm: sha256/ecdsa” 上面的握手信息（ClientHello）之中，Cipher Suites字段就是客户端列出可选的加密参数集，服务器在其中选择一个自己支持的参数集。 服务器选择完毕之后，向客户端发出回应。 1234567891011Handshake protocol: ServerHello Version: TLS 1.2 Random Server time: Mar 10, 2059 02:35:57 GMT” Random bytes: 8469b09b480c1978182ce1b59290487609f41132312ca22aacaf5012 Session ID: 4cae75c91cf5adf55f93c9fb5dd36d19903b1182029af3d527b7a42ef1c32c80 Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 Compression method: null Extensions Extension: server_name Extension: renegotiation_info” 上面的回应信息（ServerHello）中，Cipher Suite字段就是服务器最终选定的加密参数。 7.ssh 命令行配置项ssh 命令有很多配置项，修改它的默认行为。-c-c参数指定加密算法。 123$ ssh -c blowfish,3des server.example.com# 或者$ ssh -c blowfish -c 3des server.example.com 上面命令指定使用加密算法blowfish或3des。-C-C参数表示压缩数据传输。 1$ ssh -C server.example.com -d-d参数设置打印的 debug 信息级别，数值越高，输出的内容越详细。 1$ ssh –d 1 foo.com -D-D参数指定本机的 Socks 监听端口，该端口收到的请求，都将转发到远程的 SSH 主机，又称动态端口转发，详见《端口转发》一章。 1$ ssh -D 1080 server 详细命令传送门 8.客户端配置文件8.1位置SSH 客户端的全局配置文件是/etc/ssh/ssh_config，用户个人的配置文件在~/.ssh/config，优先级高于全局配置文件。 除了配置文件，~/.ssh目录还有一些用户个人的密钥文件和其他文件。下面是其中一些常见的文件。 ~/.ssh/id_ecdsa：用户的 ECDSA 私钥。 ~/.ssh/id_ecdsa.pub：用户的 ECDSA 公钥。 ~/.ssh/id_rsa：用于 SSH 协议版本2 的 RSA 私钥。 ~/.ssh/id_rsa.pub：用于SSH 协议版本2 的 RSA 公钥。 ~/.ssh/identity：用于 SSH 协议版本1 的 RSA 私钥。 ~/.ssh/identity.pub：用于 SSH 协议版本1 的 RSA 公钥。 ~/.ssh/known_hosts：包含 SSH 服务器的公钥指纹。8.2主机设置用户个人的配置文件~/.ssh/config，可以按照不同服务器，列出各自的连接参数，从而不必每一次登录都输入重复的参数。下面是一个例子。123456Host * Port 2222Host remoteserver HostName remote.example.com User neo Port 2112 上面代码中，Host *表示对所有主机生效，后面的Port 2222表示所有主机的默认连接端口都是2222，这样就不用在登录时特别指定端口了。这里的缩进并不是必需的，只是为了视觉上，易于识别针对不同主机的设置。 后面的Host remoteserver表示，下面的设置只对主机remoteserver生效。remoteserver只是一个别名，具体的主机由HostName命令指定，User和Port这两项分别表示用户名和端口。这里的Port会覆盖上面Host *部分的Port设置。 以后，登录remote.example.com时，只要执行ssh remoteserver命令，就会自动套用 config 文件里面指定的参数。单个主机的配置格式如下。 123$ ssh remoteserver# 等同于$ ssh -p 2112 neo@remote.example.com 8.3配置命令的语法ssh 客户端配置文件的每一行，就是一个配置命令。配置命令与对应的值之间，可以使用空格，也可以使用等号。 123Compression yes# 等同于Compression = yes #开头的行表示注释，会被忽略。空行等同于注释。 8.4主要配置命令123456789101112131415161718192021222324252627282930313233下面是 ssh 客户端的一些主要配置命令，以及它们的范例值。 AddressFamily inet：表示只使用 IPv4 协议。如果设为inet6，表示只使用 IPv6 协议。 BindAddress 192.168.10.235：指定本机的 IP 地址（如果本机有多个 IP 地址）。 CheckHostIP yes：检查 SSH 服务器的 IP 地址是否跟公钥数据库吻合。 Ciphers blowfish,3des：指定加密算法。 Compression yes：是否压缩传输信号。 ConnectionAttempts 10：客户端进行连接时，最大的尝试次数。 ConnectTimeout 60：客户端进行连接时，服务器在指定秒数内没有回复，则中断连接尝试。 DynamicForward 1080：指定动态转发端口。 GlobalKnownHostsFile /users/smith/.ssh/my_global_hosts_file：指定全局的公钥数据库文件的位置。 Host server.example.com：指定连接的域名或 IP 地址，也可以是别名，支持通配符。Host命令后面的所有配置，都是针对该主机的，直到下一个Host命令为止。 HostKeyAlgorithms ssh-dss,ssh-rsa：指定密钥算法，优先级从高到低排列。 HostName myserver.example.com：在Host命令使用别名的情况下，HostName指定域名或 IP 地址。 IdentityFile keyfile：指定私钥文件。 LocalForward 2001 localhost:143：指定本地端口转发。 LogLevel QUIET：指定日志详细程度。如果设为QUIET，将不输出大部分的警告和提示。 MACs hmac-sha1,hmac-md5：指定数据校验算法。 NumberOfPasswordPrompts 2：密码登录时，用户输错密码的最大尝试次数。 PasswordAuthentication no：指定是否支持密码登录。不过，这里只是客户端禁止，真正的禁止需要在 SSH 服务器设置。 Port 2035：指定客户端连接的 SSH 服务器端口。 PreferredAuthentications publickey,hostbased,password：指定各种登录方法的优先级。 Protocol 2：支持的 SSH 协议版本，多个版本之间使用逗号分隔。 PubKeyAuthentication yes：是否支持密钥登录。这里只是客户端设置，还需要在 SSH 服务器进行相应设置。 RemoteForward 2001 server:143：指定远程端口转发。 SendEnv COLOR：SSH 客户端向服务器发送的环境变量名，多个环境变量之间使用空格分隔。环境变量的值从客户端当前环境中拷贝。 ServerAliveCountMax 3：如果没有收到服务器的回应，客户端连续发送多少次keepalive信号，才断开连接。该项默认值为3。 ServerAliveInterval 300：客户端建立连接后，如果在给定秒数内，没有收到服务器发来的消息，客户端向服务器发送keepalive消息。如果不希望客户端发送，这一项设为0。 StrictHostKeyChecking yes：yes表示严格检查，服务器公钥为未知或发生变化，则拒绝连接。no表示如果服务器公钥未知，则加入客户端公钥数据库，如果公钥发生变化，不改变客户端公钥数据库，输出一条警告，依然允许连接继续进行。ask（默认值）表示询问用户是否继续进行。 TCPKeepAlive yes：客户端是否定期向服务器发送keepalive信息。 User userName：指定远程登录的账户名。 UserKnownHostsFile /users/smith/.ssh/my_local_hosts_file：指定当前用户的known_hosts文件（服务器公钥指纹列表）的位置。 VerifyHostKeyDNS yes：是否通过检查 SSH 服务器的 DNS 记录，确认公钥指纹是否与known_hosts文件保存的一致。","categories":[{"name":"SSH","slug":"SSH","permalink":"http://wjymzh.github.io/categories/SSH/"}],"tags":[{"name":"SSH","slug":"SSH","permalink":"http://wjymzh.github.io/tags/SSH/"},{"name":"安全，协议","slug":"安全，协议","permalink":"http://wjymzh.github.io/tags/%E5%AE%89%E5%85%A8%EF%BC%8C%E5%8D%8F%E8%AE%AE/"}]},{"title":"Bash 命令提示符","slug":"Bash-命令提示符","date":"2020-12-16T16:43:06.000Z","updated":"2020-12-16T16:43:06.729Z","comments":true,"path":"2020/12/17/Bash-命令提示符/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Bash-%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Bash 启动环境","slug":"Bash-启动环境","date":"2020-12-16T16:42:15.000Z","updated":"2020-12-16T16:42:36.171Z","comments":true,"path":"2020/12/17/Bash-启动环境/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Bash-%E5%90%AF%E5%8A%A8%E7%8E%AF%E5%A2%83/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Bash mktemp 命令，trap 命令","slug":"Bash-mktemp-命令，trap-命令","date":"2020-12-16T16:41:56.000Z","updated":"2020-12-16T16:41:56.549Z","comments":true,"path":"2020/12/17/Bash-mktemp-命令，trap-命令/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Bash-mktemp-%E5%91%BD%E4%BB%A4%EF%BC%8Ctrap-%E5%91%BD%E4%BB%A4/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Bash 脚本除错","slug":"Bash-脚本除错","date":"2020-12-16T16:41:39.000Z","updated":"2020-12-16T16:41:39.936Z","comments":true,"path":"2020/12/17/Bash-脚本除错/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Bash-%E8%84%9A%E6%9C%AC%E9%99%A4%E9%94%99/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Bash set 命令","slug":"Bash-set-命令","date":"2020-12-16T16:41:22.000Z","updated":"2020-12-16T16:41:22.998Z","comments":true,"path":"2020/12/17/Bash-set-命令/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Bash-set-%E5%91%BD%E4%BB%A4/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Bash 数组","slug":"Bash-数组","date":"2020-12-16T16:41:11.000Z","updated":"2020-12-16T16:41:11.510Z","comments":true,"path":"2020/12/17/Bash-数组/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Bash-%E6%95%B0%E7%BB%84/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Bash 函数","slug":"Bash-函数","date":"2020-12-16T16:41:00.000Z","updated":"2020-12-16T16:41:00.317Z","comments":true,"path":"2020/12/17/Bash-函数/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Bash-%E5%87%BD%E6%95%B0/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Bash 循环","slug":"Bash-循环","date":"2020-12-16T16:40:47.000Z","updated":"2020-12-16T16:40:47.380Z","comments":true,"path":"2020/12/17/Bash-循环/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Bash-%E5%BE%AA%E7%8E%AF/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Bash 条件判断","slug":"Bash-条件判断","date":"2020-12-16T16:40:35.000Z","updated":"2020-12-16T16:40:35.699Z","comments":true,"path":"2020/12/17/Bash-条件判断/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Bash-%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Bash read 命令","slug":"Bash-read-命令","date":"2020-12-16T16:40:23.000Z","updated":"2020-12-16T16:40:23.010Z","comments":true,"path":"2020/12/17/Bash-read-命令/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Bash-read-%E5%91%BD%E4%BB%A4/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Bash 脚本入门","slug":"Bash-脚本入门","date":"2020-12-16T16:40:05.000Z","updated":"2020-12-16T16:40:05.089Z","comments":true,"path":"2020/12/17/Bash-脚本入门/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Bash-%E8%84%9A%E6%9C%AC%E5%85%A5%E9%97%A8/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Bash 目录堆栈","slug":"Bash-目录堆栈","date":"2020-12-16T16:39:48.000Z","updated":"2020-12-16T16:39:48.861Z","comments":true,"path":"2020/12/17/Bash-目录堆栈/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Bash-%E7%9B%AE%E5%BD%95%E5%A0%86%E6%A0%88/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Bash 行操作","slug":"Bash-行操作","date":"2020-12-16T16:39:34.000Z","updated":"2020-12-16T16:39:34.785Z","comments":true,"path":"2020/12/17/Bash-行操作/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Bash-%E8%A1%8C%E6%93%8D%E4%BD%9C/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Bash 的算术运算","slug":"Bash-的算术运算","date":"2020-12-16T16:39:17.000Z","updated":"2020-12-16T16:39:17.766Z","comments":true,"path":"2020/12/17/Bash-的算术运算/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Bash-%E7%9A%84%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"字符串操作","slug":"Bash 字符串操作","date":"2020-12-16T16:38:39.000Z","updated":"2020-12-16T16:38:39.302Z","comments":true,"path":"2020/12/17/Bash 字符串操作/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Bash%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Bash 变量","slug":"Bash-变量","date":"2020-12-16T16:38:19.000Z","updated":"2020-12-16T16:38:19.982Z","comments":true,"path":"2020/12/17/Bash-变量/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Bash-%E5%8F%98%E9%87%8F/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Bash 引号和转义","slug":"Bash-引号和转义","date":"2020-12-16T16:38:02.000Z","updated":"2020-12-16T16:38:02.490Z","comments":true,"path":"2020/12/17/Bash-引号和转义/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Bash-%E5%BC%95%E5%8F%B7%E5%92%8C%E8%BD%AC%E4%B9%89/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Bash 的模式扩展","slug":"Bash-的模式扩展","date":"2020-12-16T16:37:46.000Z","updated":"2020-12-16T16:37:46.074Z","comments":true,"path":"2020/12/17/Bash-的模式扩展/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Bash-%E7%9A%84%E6%A8%A1%E5%BC%8F%E6%89%A9%E5%B1%95/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Bash 的基本语法","slug":"Bash-的基本语法","date":"2020-12-16T16:37:28.000Z","updated":"2020-12-16T16:37:28.954Z","comments":true,"path":"2020/12/17/Bash-的基本语法/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Bash-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6 ArrayBuffer","slug":"ES6-ArrayBuffer","date":"2020-12-16T16:36:23.000Z","updated":"2020-12-16T16:36:23.779Z","comments":true,"path":"2020/12/17/ES6-ArrayBuffer/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6-ArrayBuffer/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6 异步遍历器","slug":"ES6-异步遍历器","date":"2020-12-16T16:35:55.000Z","updated":"2020-12-16T16:35:55.843Z","comments":true,"path":"2020/12/17/ES6-异步遍历器/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6-%E5%BC%82%E6%AD%A5%E9%81%8D%E5%8E%86%E5%99%A8/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"读懂 ECMAScript 规格","slug":"读懂-ECMAScript-规格","date":"2020-12-16T16:35:33.000Z","updated":"2020-12-16T16:35:33.703Z","comments":true,"path":"2020/12/17/读懂-ECMAScript-规格/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/%E8%AF%BB%E6%87%82-ECMAScript-%E8%A7%84%E6%A0%BC/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6 编程风格","slug":"ES6-编程风格","date":"2020-12-16T16:34:59.000Z","updated":"2020-12-16T16:34:59.935Z","comments":true,"path":"2020/12/17/ES6-编程风格/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6-%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6 Module 的加载实现","slug":"ES6-Module-的加载实现","date":"2020-12-16T16:34:42.000Z","updated":"2020-12-16T16:34:42.475Z","comments":true,"path":"2020/12/17/ES6-Module-的加载实现/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6-Module-%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6 Module 的语法","slug":"ES6-Module-的语法","date":"2020-12-16T16:34:27.000Z","updated":"2020-12-16T16:34:27.647Z","comments":true,"path":"2020/12/17/ES6-Module-的语法/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6-Module-%E7%9A%84%E8%AF%AD%E6%B3%95/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6 Class 的继承","slug":"ES6-Class-的继承","date":"2020-12-16T16:34:12.000Z","updated":"2020-12-16T16:34:12.240Z","comments":true,"path":"2020/12/17/ES6-Class-的继承/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6-Class-%E7%9A%84%E7%BB%A7%E6%89%BF/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6 Class 的基本语法","slug":"ES6-Class-的基本语法","date":"2020-12-16T16:33:54.000Z","updated":"2020-12-16T16:33:54.764Z","comments":true,"path":"2020/12/17/ES6-Class-的基本语法/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6-Class-%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6 async 函数","slug":"ES6-async-函数","date":"2020-12-16T16:33:35.000Z","updated":"2020-12-16T16:33:35.612Z","comments":true,"path":"2020/12/17/ES6-async-函数/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6-async-%E5%87%BD%E6%95%B0/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6 Generator 函数的异步应用","slug":"ES6-Generator-函数的异步应用","date":"2020-12-16T16:33:15.000Z","updated":"2020-12-16T16:33:15.160Z","comments":true,"path":"2020/12/17/ES6-Generator-函数的异步应用/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6-Generator-%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E6%AD%A5%E5%BA%94%E7%94%A8/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Generator 函数的语法","slug":"ES6 Generator-函数的语法","date":"2020-12-16T16:32:32.000Z","updated":"2020-12-16T16:32:32.568Z","comments":true,"path":"2020/12/17/ES6 Generator-函数的语法/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6%20Generator-%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%AD%E6%B3%95/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6 Iterator 和 for...of 循环","slug":"ES6-Iterator-和-for-of-循环","date":"2020-12-16T16:32:17.000Z","updated":"2020-12-16T16:32:17.696Z","comments":true,"path":"2020/12/17/ES6-Iterator-和-for-of-循环/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6-Iterator-%E5%92%8C-for-of-%E5%BE%AA%E7%8E%AF/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6 Promise 对象","slug":"ES6-Promise-对象","date":"2020-12-16T16:31:58.000Z","updated":"2020-12-16T16:31:58.972Z","comments":true,"path":"2020/12/17/ES6-Promise-对象/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6-Promise-%E5%AF%B9%E8%B1%A1/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6 Reflect","slug":"ES6-Reflect","date":"2020-12-16T16:31:44.000Z","updated":"2020-12-16T16:31:44.433Z","comments":true,"path":"2020/12/17/ES6-Reflect/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6-Reflect/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6 Proxy","slug":"ES6-Proxy","date":"2020-12-16T16:31:27.000Z","updated":"2020-12-16T16:31:27.913Z","comments":true,"path":"2020/12/17/ES6-Proxy/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6-Proxy/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ESSet 和 Map 数据结构","slug":"ES6 Set-和-Map-数据结构","date":"2020-12-16T16:30:51.000Z","updated":"2020-12-16T16:30:51.137Z","comments":true,"path":"2020/12/17/ES6 Set-和-Map-数据结构/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6%20Set-%E5%92%8C-Map-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6Symbol","slug":"ES6  Symbol","date":"2020-12-16T16:30:19.000Z","updated":"2020-12-16T16:30:19.793Z","comments":true,"path":"2020/12/17/ES6  Symbol/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6%20%20Symbol/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6对象的新增方法","slug":"ES6对象的新增方法","date":"2020-12-16T16:30:04.000Z","updated":"2020-12-16T16:30:04.869Z","comments":true,"path":"2020/12/17/ES6对象的新增方法/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6对象的扩展","slug":"ES6对象的扩展","date":"2020-12-16T16:29:45.000Z","updated":"2020-12-16T16:29:45.761Z","comments":true,"path":"2020/12/17/ES6对象的扩展/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6数组的扩展","slug":"ES6数组的扩展","date":"2020-12-16T16:29:32.000Z","updated":"2020-12-16T16:29:32.505Z","comments":true,"path":"2020/12/17/ES6数组的扩展/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6函数的扩展","slug":"ES6函数的扩展","date":"2020-12-16T16:29:19.000Z","updated":"2020-12-16T16:29:19.970Z","comments":true,"path":"2020/12/17/ES6函数的扩展/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6数值的扩展","slug":"ES6数值的扩展","date":"2020-12-16T16:29:06.000Z","updated":"2020-12-16T16:29:06.286Z","comments":true,"path":"2020/12/17/ES6数值的扩展/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6正则的扩展","slug":"ES6正则的扩展","date":"2020-12-16T16:27:24.000Z","updated":"2020-12-16T16:27:24.546Z","comments":true,"path":"2020/12/17/ES6正则的扩展/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6%E6%AD%A3%E5%88%99%E7%9A%84%E6%89%A9%E5%B1%95/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ES6字符串的新增方法","slug":"ES6字符串的新增方法","date":"2020-12-16T16:27:07.000Z","updated":"2020-12-16T16:27:07.142Z","comments":true,"path":"2020/12/17/ES6字符串的新增方法/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"字符串的扩展","slug":"ES6字符串的扩展","date":"2020-12-16T16:26:38.000Z","updated":"2020-12-16T16:26:38.523Z","comments":true,"path":"2020/12/17/ES6字符串的扩展/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"变量的解构赋值","slug":"ES6变量的解构赋值","date":"2020-12-16T16:26:21.000Z","updated":"2020-12-16T16:26:21.307Z","comments":true,"path":"2020/12/17/ES6变量的解构赋值/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"let 和 const 命令","slug":"ES6 let-和-const-命令","date":"2020-12-16T16:25:40.000Z","updated":"2020-12-17T16:42:42.226Z","comments":true,"path":"2020/12/17/ES6 let-和-const-命令/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/ES6%20let-%E5%92%8C-const-%E5%91%BD%E4%BB%A4/","excerpt":"","text":"1.let命令基本用法ES6 新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。 1234567&#123; let a = 10; var b = 1;&#125;a // ReferenceError: a is not defined.b // 1 上面代码在代码块之中，分别用let和var声明了两个变量。然后在代码块之外调用这两个变量，结果let声明的变量报错，var声明的变量返回了正确的值。这表明，let声明的变量只在它所在的代码块有效。 for循环的计数器，就很合适使用let命令。 123456for (let i = 0; i &lt; 10; i++) &#123; // ...&#125;console.log(i);// ReferenceError: i is not defined 上面代码中，计数器i只在for循环体内有效，在循环体外引用就会报错。下面的代码如果使用var，最后输出的是10。 1234567var a = [];for (var i = 0; i &lt; 10; i++) &#123; a[i] = function () &#123; console.log(i); &#125;;&#125;a[6](); // 10 上面代码中，变量i是var命令声明的，在全局范围内都有效，所以全局只有一个变量i。每一次循环，变量i的值都会发生改变，而循环内被赋给数组a的函数内部的console.log(i)，里面的i指向的就是全局的i。也就是说，所有数组a的成员里面的i，指向的都是同一个i，导致运行时输出的是最后一轮的i的值，也就是 10。 如果使用let，声明的变量仅在块级作用域内有效，最后输出的是 6。 1234567var a = [];for (let i = 0; i &lt; 10; i++) &#123; a[i] = function () &#123; console.log(i); &#125;;&#125;a[6](); // 6 上面代码中，变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，所以最后输出的是6。你可能会问，如果每一轮循环的变量i都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为 JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量i时，就在上一轮循环的基础上进行计算。另外，for循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。 1234567for (let i = 0; i &lt; 3; i++) &#123; let i = &#x27;abc&#x27;; console.log(i);&#125;// abc// abc// abc 上面代码正确运行，输出了 3 次abc。这表明函数内部的变量i与循环变量i不在同一个作用域，有各自单独的作用域。 不存在变量提升var命令会发生“变量提升”现象，即变量可以在声明之前使用，值为undefined。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。 为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。 1234567// var 的情况console.log(foo); // 输出undefinedvar foo = 2;// let 的情况console.log(bar); // 报错ReferenceErrorlet bar = 2; 上面代码中，变量foo用var命令声明，会发生变量提升，即脚本开始运行时，变量foo已经存在了，但是没有值，所以会输出undefined。变量bar用let命令声明，不会发生变量提升。这表示在声明它之前，变量bar是不存在的，这时如果用到它，就会抛出一个错误。 暂时性死区只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。 1234567var tmp = 123;if (true) &#123; tmp = &#x27;abc&#x27;; // ReferenceError let tmp;&#125; 上面代码中，存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。 ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。 总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。 1234567891011if (true) &#123; // TDZ开始 tmp = &#x27;abc&#x27;; // ReferenceError console.log(tmp); // ReferenceError let tmp; // TDZ结束 console.log(tmp); // undefined tmp = 123; console.log(tmp); // 123&#125; 上面代码中，在let命令声明变量tmp之前，都属于变量tmp的“死区”。 “暂时性死区”也意味着typeof不再是一个百分之百安全的操作。 12typeof x; // ReferenceErrorlet x;","categories":[{"name":"ES6","slug":"ES6","permalink":"http://wjymzh.github.io/categories/ES6/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://wjymzh.github.io/tags/JavaScript/"},{"name":"前端","slug":"前端","permalink":"http://wjymzh.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"ES6","slug":"ES6","permalink":"http://wjymzh.github.io/tags/ES6/"}]},{"title":"业务逻辑漏洞总结","slug":"业务逻辑漏洞总结","date":"2020-12-16T16:16:21.000Z","updated":"2020-12-16T16:16:21.361Z","comments":true,"path":"2020/12/17/业务逻辑漏洞总结/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"缓冲区溢出总结","slug":"缓冲区溢出总结","date":"2020-12-16T16:16:06.000Z","updated":"2020-12-16T16:16:06.333Z","comments":true,"path":"2020/12/17/缓冲区溢出总结/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA%E6%80%BB%E7%BB%93/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"文件上传漏洞总结","slug":"文件上传漏洞总结","date":"2020-12-16T16:15:51.000Z","updated":"2020-12-16T16:15:51.881Z","comments":true,"path":"2020/12/17/文件上传漏洞总结/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"未验证的重定向和转发总结","slug":"未验证的重定向和转发总结","date":"2020-12-16T16:15:33.000Z","updated":"2020-12-16T16:15:33.754Z","comments":true,"path":"2020/12/17/未验证的重定向和转发总结/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/%E6%9C%AA%E9%AA%8C%E8%AF%81%E7%9A%84%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E8%BD%AC%E5%8F%91%E6%80%BB%E7%BB%93/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"不足的日志记录和监控总结","slug":"不足的日志记录和监控总结","date":"2020-12-16T16:15:13.000Z","updated":"2020-12-16T16:15:13.078Z","comments":true,"path":"2020/12/17/不足的日志记录和监控总结/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/%E4%B8%8D%E8%B6%B3%E7%9A%84%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E5%92%8C%E7%9B%91%E6%8E%A7%E6%80%BB%E7%BB%93/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"使用含有已知漏洞的组件总结","slug":"使用含有已知漏洞的组件总结","date":"2020-12-16T16:15:00.000Z","updated":"2020-12-16T16:15:00.075Z","comments":true,"path":"2020/12/17/使用含有已知漏洞的组件总结/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/%E4%BD%BF%E7%94%A8%E5%90%AB%E6%9C%89%E5%B7%B2%E7%9F%A5%E6%BC%8F%E6%B4%9E%E7%9A%84%E7%BB%84%E4%BB%B6%E6%80%BB%E7%BB%93/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"不安全的反序列化总结","slug":"不安全的反序列化总结","date":"2020-12-16T16:14:14.000Z","updated":"2020-12-16T16:14:14.644Z","comments":true,"path":"2020/12/17/不安全的反序列化总结/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%80%BB%E7%BB%93/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"失效的访问控制(越权)总结","slug":"失效的访问控制-越权-总结","date":"2020-12-16T16:13:34.000Z","updated":"2020-12-16T16:13:34.720Z","comments":true,"path":"2020/12/17/失效的访问控制-越权-总结/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/%E5%A4%B1%E6%95%88%E7%9A%84%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-%E8%B6%8A%E6%9D%83-%E6%80%BB%E7%BB%93/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"安全配置错误总结","slug":"安全配置错误总结","date":"2020-12-16T16:13:26.000Z","updated":"2020-12-17T15:09:00.327Z","comments":true,"path":"2020/12/17/安全配置错误总结/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/","excerpt":"","text":"","categories":[{"name":"Web安全","slug":"Web安全","permalink":"http://wjymzh.github.io/categories/Web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"Web","slug":"Web","permalink":"http://wjymzh.github.io/tags/Web/"},{"name":"安全","slug":"安全","permalink":"http://wjymzh.github.io/tags/%E5%AE%89%E5%85%A8/"},{"name":"安全配置","slug":"安全配置","permalink":"http://wjymzh.github.io/tags/%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/"}]},{"title":"XML外部实体(XXE)总结","slug":"XML外部实体-XXE-总结","date":"2020-12-16T16:12:24.000Z","updated":"2020-12-16T16:12:24.228Z","comments":true,"path":"2020/12/17/XML外部实体-XXE-总结/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/XML%E5%A4%96%E9%83%A8%E5%AE%9E%E4%BD%93-XXE-%E6%80%BB%E7%BB%93/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"敏感信息泄露总结","slug":"敏感信息泄露总结","date":"2020-12-16T16:11:40.000Z","updated":"2020-12-16T16:11:40.060Z","comments":true,"path":"2020/12/17/敏感信息泄露总结/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%80%BB%E7%BB%93/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"失效的身份认证和会话管理总结","slug":"失效的身份认证和会话管理总结","date":"2020-12-16T16:11:12.000Z","updated":"2020-12-16T16:11:12.696Z","comments":true,"path":"2020/12/17/失效的身份认证和会话管理总结/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/%E5%A4%B1%E6%95%88%E7%9A%84%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E5%92%8C%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86%E6%80%BB%E7%BB%93/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Xpath注入总结","slug":"Xpath注入总结","date":"2020-12-16T16:10:16.000Z","updated":"2020-12-16T16:10:16.304Z","comments":true,"path":"2020/12/17/Xpath注入总结/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/Xpath%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"OS命令注入总结","slug":"OS命令注入总结","date":"2020-12-16T16:09:59.000Z","updated":"2020-12-16T16:10:00.001Z","comments":true,"path":"2020/12/17/OS命令注入总结/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/OS%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"SQL注入总结","slug":"SQL注入总结","date":"2020-12-16T16:09:44.000Z","updated":"2020-12-16T16:09:44.309Z","comments":true,"path":"2020/12/17/SQL注入总结/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/SQL%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"CSRF总结","slug":"CSRF总结","date":"2020-12-16T16:07:53.000Z","updated":"2020-12-16T16:07:53.066Z","comments":true,"path":"2020/12/17/CSRF总结/","link":"","permalink":"http://wjymzh.github.io/2020/12/17/CSRF%E6%80%BB%E7%BB%93/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"XSS总结","slug":"XSS总结","date":"2020-12-16T15:26:33.000Z","updated":"2020-12-16T15:29:25.408Z","comments":true,"path":"2020/12/16/XSS总结/","link":"","permalink":"http://wjymzh.github.io/2020/12/16/XSS%E6%80%BB%E7%BB%93/","excerpt":"","text":"简述常用的XSS攻击手段和目的","categories":[{"name":"Web安全","slug":"Web安全","permalink":"http://wjymzh.github.io/categories/Web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"Web","slug":"Web","permalink":"http://wjymzh.github.io/tags/Web/"},{"name":"XSS","slug":"XSS","permalink":"http://wjymzh.github.io/tags/XSS/"},{"name":"安全","slug":"安全","permalink":"http://wjymzh.github.io/tags/%E5%AE%89%E5%85%A8/"}]}],"categories":[{"name":"运维","slug":"运维","permalink":"http://wjymzh.github.io/categories/%E8%BF%90%E7%BB%B4/"},{"name":"Github","slug":"Github","permalink":"http://wjymzh.github.io/categories/Github/"},{"name":"SSH","slug":"SSH","permalink":"http://wjymzh.github.io/categories/SSH/"},{"name":"ES6","slug":"ES6","permalink":"http://wjymzh.github.io/categories/ES6/"},{"name":"Web安全","slug":"Web安全","permalink":"http://wjymzh.github.io/categories/Web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"运维","slug":"运维","permalink":"http://wjymzh.github.io/tags/%E8%BF%90%E7%BB%B4/"},{"name":"MySQL，数据库","slug":"MySQL，数据库","permalink":"http://wjymzh.github.io/tags/MySQL%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"Github","slug":"Github","permalink":"http://wjymzh.github.io/tags/Github/"},{"name":"加速","slug":"加速","permalink":"http://wjymzh.github.io/tags/%E5%8A%A0%E9%80%9F/"},{"name":"Git","slug":"Git","permalink":"http://wjymzh.github.io/tags/Git/"},{"name":"SSH","slug":"SSH","permalink":"http://wjymzh.github.io/tags/SSH/"},{"name":"安全，协议","slug":"安全，协议","permalink":"http://wjymzh.github.io/tags/%E5%AE%89%E5%85%A8%EF%BC%8C%E5%8D%8F%E8%AE%AE/"},{"name":"Linux","slug":"Linux","permalink":"http://wjymzh.github.io/tags/Linux/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://wjymzh.github.io/tags/JavaScript/"},{"name":"前端","slug":"前端","permalink":"http://wjymzh.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"ES6","slug":"ES6","permalink":"http://wjymzh.github.io/tags/ES6/"},{"name":"Web","slug":"Web","permalink":"http://wjymzh.github.io/tags/Web/"},{"name":"安全","slug":"安全","permalink":"http://wjymzh.github.io/tags/%E5%AE%89%E5%85%A8/"},{"name":"安全配置","slug":"安全配置","permalink":"http://wjymzh.github.io/tags/%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/"},{"name":"XSS","slug":"XSS","permalink":"http://wjymzh.github.io/tags/XSS/"}]}